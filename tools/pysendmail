#!/usr/bin/env python
"""
Email forwarder that sends directly to an authorized email system  SMTP server.
This tool was defined and tested around gmail and works with gmail. It has not
been tested with other services.

The primary purpose is to send email files with parameters from the command
line. It does include the capability to get the toaddresses, fromaddress,
subject, and text from prompt input if they are not provided on the commmand
line but that is just a test tool.

It includes help if the command pysendmail --help is entered for command line
parameters.

This code requires a configuration file to separate private information on
the configuration of the the sender including the user name, user pw, and
smtp server definition.  It provides a default smtp server for gmail with tls
"""
from __future__ import print_function

import os
import sys
import email.message
import smtplib
import re
import argparse as _argparse
import ConfigParser

from smipyping import __version__

DEFAULTFROMADDR = None

# Set from config file on startup
USR = None
PW = None
# Default is string here.  This is set from config file each time
# pysendmail is started
SMTP_SERVER = 'smtp.gmail.com:587'
SMTP_PORT = None


def send_msg(message, to_addrs, from_addr, verbosity):
    """
    Try to send the message using the python smtplib. This always sends through
    tls.
    """
    try:
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT, timeout=30)
        if verbosity:
            server.set_debuglevel(1)
        server.ehlo()
        server.starttls()
        server.login(USR, PW)
    except smtplib.SMTPException as se:
        print('SMTP connection Exception error %s mail not sent' % se)
        sys.exit(1)

    if verbosity > 2:
        print('sendmail \n  from %s, \n  to %s, \nmsg %s' %
              (message['From'], message['To'], message.as_string()))
    try:
        rslt = server.sendmail(from_addr,
                               to_addrs,
                               message.as_string())

        print('Msg sent from %s to %s' % (from_addr, to_addrs))
        if rslt:
            print('Refused recipients: %s' % rslt)
        server.quit()

    except Exception as ex:
        print('SEND msg from %s to %s\n failed with exception %s' %
              (message['From'], message['To'], ex))
        sys.exit(1)


if __name__ == '__main__':
    prog = os.path.basename(sys.argv[0])
    usage = '%(prog)s [options] server'
    desc = """

CLI program to send mail message based on the input parameters. The email to
be sent is defined by the input parameters for the command. The configuration
of the SMTP server to be used and some default parameters for the command
line input are defined by a required configuration file. The configuration
file default is email.ini. The location in the directory for this file is
determined by the method of installing smipyping.
"""
    epilog = """
Examples:
  %s --to a.b@blah.com --to x.y@ bb.com --from --subject --file msg.txt

  %s
  Asks for each input
""" % (prog, prog)

    argparser = _argparse.ArgumentParser(
        prog=prog, usage=usage, description=desc, epilog=epilog)

    email_arggroup = argparser.add_argument_group(
        'Email message content options')
    email_arggroup.add_argument(
        '-t', '--to', metavar='to', nargs='*', dest='toaddrs',
        help='Email address to send to. Accepts multiple email addresses. '
             'If no --to paramter is defined, the to address is requested in a '
             'prompt. At least one to address is required')

    email_arggroup.add_argument(
        '-f', '--from', metavar='from', dest='fromaddr',
        help='A single from email address. Default is from address in '
             'config file')

    email_arggroup.add_argument(
        '-c', '--CC', metavar='CC', dest='fromaddr',
        help='None or more email addresses separated by spaces. Optional')

    email_arggroup.add_argument(
        '-s', '--subject', metavar='subject', dest='subject',
        help='Subject line for the email.')

    email_arggroup.add_argument(
        '-m', '--message', metavar='message', dest='message',
        help='Message content for the email.')

    email_arggroup.add_argument(
        '-F', '--file', metavar='message-file', dest='message_file',
        help='File name containing message content for the email.')

    general_arggroup = argparser.add_argument_group(
        'General options')

    general_arggroup.add_argument(
        '-C', '--configfile', metavar='ConfigFile', dest='configfile',
        default='email.ini',
        help='Configuration file defining email configuration.')

    general_arggroup.add_argument(
        '-v', '--verbosity', dest='verbosity',
        action='count', default=0,
        help='Print more messages while processing. Verbosity level is set'
             'by using -v (show comm with server), -vv (also msg) or -vvv')
    general_arggroup.add_argument(
        '-V', '--version', action='version', version='%(prog)s ' + __version__,
        help='Display pywbem version and exit.')

    args = argparser.parse_args()
    if args.verbosity > 3:
        print('ARGS %r' % args)

    if not os.path.isfile(args.configfile):
        argparser.error('No configuration file %s found' % args.configfile)

    config = ConfigParser.ConfigParser()
    config.read(args.configfile)
    USR = config.get('email', 'user')
    PW = config.get('email', 'password')
    DEFAULTFROMADDR = config.get('email', 'DefaultFromAddress')
    SMTP_SERVER = config.get('email', 'SmtpServer')
    print("SMTP_SERVER %s" % SMTP_SERVER)
    if re.match('.*:[0-9]{3}$', SMTP_SERVER):
        print('MATCH %s' % SMTP_SERVER)
        SMTP_PORT = SMTP_SERVER[-3:]
        SMTP_SERVER = SMTP_SERVER[-4:]
    else:
        SMTP_PORT = config.get('email', 'port')
    print('SMI SV %s prot %s' % (SMTP_SERVER, SMTP_PORT))

    if args.message and args.message_file:
        argparser.error('Message and message-file options together not allowed')

    if not args.toaddrs:
        argparser.error('To address parameter required')

    if not args.fromaddr:
        if DEFAULTFROMADDR:
            fromaddr = DEFAULTFROMADDR
        else:
            argparser.error("To address parameter or DefaultFromAddress in "
                            "configuration file required. No From adddress for"
                            "this message")
    else:
        fromaddr = args.fromaddr

    if args.message_file:
        if not os.path.isfile(args.message_file):
            argparser.error("Message_file %s does not exist" %
                            args.message_file)
        with open(args.message_file, 'r') as msgfile:
            payload = msgfile.read()
    elif args.message:
        payload = args.message
    else:
        payload = None

    mail_msg = email.message.Message()
    if args.message_file:
        if args.message_file.endswith('html'):
            mail_msg.add_header('Content-Type', 'text/html')

    mail_msg['From'] = '"%s"' % fromaddr

    mail_msg['To'] = ', '.join(args.toaddrs)

    # if args.CC:
    #    mail_msg['CC'] = args.CC
    if args.subject:
        mail_msg['Subject'] = args.subject
    if payload:
        mail_msg.set_payload(payload)

    # built_msg = build_message(mail_msg, fromaddr=args.fromaddr,
                              # toaddrs=args.toaddrs,
                              # subject=args.subject,
                              # payload=msg_text)

    if args.verbosity > 1:
        print('Assembled Message:\n%s' % mail_msg.as_string())

    send_msg(mail_msg, args.toaddrs, fromaddr, args.verbosity)
