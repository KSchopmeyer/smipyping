#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
    Provides script interface to manage user data. This is temporary


    This script:
        Has a number of subcommands to manage the userdata.
"""
from __future__ import absolute_import

import sys as _sys
import os
from smipyping._explore import create_explore_parser

from smipyping import Explorer, DB_TYPE, TargetsData


def main(prog):
    logfile = '%s.log' % prog

    argparser = create_explore_parser(prog)

    args = argparser.parse_args()

    if args.verbose:
        print('args %s' % args)

    target_data = TargetsData.factory(args.config_file, DB_TYPE, args.verbose)

    hosts = target_data.get_hostid_list()

    print('hosts %s' % hosts)

    filtered_hosts = []

    # TODO make this list comprehension
    if args.uri and args.target_id:
        print('ERROR: Use either uri or target_id option. They are exclusive')
        return 1
    if args.uri:
        for host in hosts:
            if host == args.wbemserver:
                filtered_hosts.append(host)
        if len(filtered_hosts) == 0:
            raise ValueError('Ip address %s not in data base' % args.wbemserver)
    elif args.target_id:
        target = target_data[args.target_id]
        filtered_hosts.append(target['IPAddress'])
    else:
        filtered_hosts = hosts

    targets = []
    for host in filtered_hosts:
        print('targest extend host %s, rtns %s' %
              (host, target_data.get_target_for_host(host)))
              
        targets.extend(target_data.get_target_for_host(host))
    print('targets %s 0 %s ' % (targets, type(targets[0])))

    targets = set(targets)

    print('targets after set %s' % targets)
        

    ping = False if args.no_ping else True

    logfile = '%s.log' % prog

    print('args %s' % args)

    explore = Explorer(prog, target_data, logfile=logfile, verbose=args.verbose,
                       ping=ping)

    servers = explore.explore_servers(targets)

    # print results
    explore.print_server_info(servers, target_data)

    # repeat to get smi info.

    explore.print_smi_profile_info(servers, target_data)

    return 0


if __name__ == '__main__':
    prog_name = os.path.basename(_sys.argv[0])
    _sys.exit(main(prog_name))
