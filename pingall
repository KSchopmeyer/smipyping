#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
    Provided the command line script to execute the simple ping against all
    servers in the user database.

    This script executes the following for each server in the database:

        If the -p option is set, pings the server to confirm that the
            IP address exists.

        Executes a connect to the server defined by the cmd line

        Executes a fixed test against that server (existence of one class).
"""
from __future__ import absolute_import

import sys
import os
import argparse as _argparse
from smipyping import connect_server, test_server, CsvUserData, ping_host, \
                      server_to_url
from smipyping import SmartFormatter as _SmartFormatter

def create_argparser(prog_name):
    """
        Create the argument paser to execute the simpleping test against
        all servers in the user database

        Returns the created parser.
    """

    prog = prog_name  # Name of the script file invoking this module
    usage = '%(prog)s [options] subnet [subnet] ...'
    desc = 'Sweep possible WBEMServer ports across a range of IP subnets '\
           'and ports to find existing open WBEM servers.'
    epilog = """

%s -c <filename> -p
""" % (prog)

    argparser = _argparse.ArgumentParser(
        prog=prog, usage=usage, description=desc, epilog=epilog,
        formatter_class=_SmartFormatter)

    general_arggroup = argparser.add_argument_group(
        'General options')
    general_arggroup.add_argument(
        '--csvfile', '-c', default='userdata_example.csv',
        help='Use csv input file')
    general_arggroup.add_argument(
        '--no_threads', action='store_true', default=False,
        help='If set, defaults to non-threaded implementation. The'
             ' non-threaded implementation takes much longer to execute.')
    general_arggroup.add_argument(
        '--debug', '-d', action='store_true', default=False,
        help='Displays request and response XML')
    general_arggroup.add_argument(
        '--verbose', '-v', action='store_true', default=False,
        help='If set output detail displays as test proceeds')
    general_arggroup.add_argument(
        '--ignore_disabled', '-i', action='store_true', default=False,
        help='If set ignores all records marked disabled')
    general_arggroup.add_argument(
        '--ping', '-p', action='store_true', default=False,
        help='Ping for server as first test.')

    return argparser


def parse_cmdline(argparser_):
    """
    Process the cmdline arguments including any default substitution.

    This is based on the argparser defined by the create... function.

    Either returns the args or executes argparser.error
    """

    args = argparser_.parse_args()

    if not args.csvfile:
        argparser_.error('No csvfile specified')
        return None

    if args.verbose:
        print('csvfile=%s' % args.csvfile)
        print('verbose=%s' % args.verbose)
        print('debug=%s' % args.debug)
        print('ping=%s' % args.ping)
        print('ignore_disabled=%s' % args.ignore_disabled)
        print('no_threads=%s' % args.no_threads)

    return args

#def test_this_svr(ip_address, ns, user, creds, timeout=None, debug=None, \
                #verbose=None, ping=False):
    
    #if ping:
        #if not ping_host(ip_address, ping_timeout):
            #return()
            #rtn_code = 6
            #rtn_code_type = 'Ping failed'
            #continue

    #rtn_code = 0
    #if rtn_code == 0:
        #conn = connect_server(server,
                              #arg_parser,
                              #ns,
                              #user,
                              #creds,
                              #timeout,
                              #verify_cert=False,
                              #debug=opts.debug, verbose=opts.verbose)

        #return(test_server(conn, debug=debug, verbose=verbose))


def main(prog):
    """ Main function uses simpleping.py to execute. This provides
        the parsing, connection and calls the test-server function

        Returns with either exit code = 0 if OK or exit_code = 1 if error
    """
    arg_parser = create_argparser(prog)

    opts = parse_cmdline(arg_parser)

    user_data = CsvUserData(opts.csvfile)

    ping_timeout = 2      # 2 second ping timeout
    op_timeout = 20       # 20 second operation timeout

    for record_id in user_data:
        # TODO map this to use __getItem__
        record = user_data.get_dict_record(record_id)
        company = record['CompanyName']
        scheme = record["Protocol"]
        server = '%s://%s' % (scheme, record['IPAddress'])

        if opts.verbose:
            print('server %s record_id=%s company=%s ' % (server, record_id,
                                                          company))

        if opts.ignore_disabled and user_data.disabled_record(record):
            print('Ignore disabled %s %s %s' % (record_id,
                                                record['IPAddress'],
                                                company))
            continue

        url = server_to_url(server, arg_parser)

        conn = connect_server(url,
                              record["Namespace"],
                              user=record["Principal"],
                              password=record["Credential"],
                              timeout=op_timeout,
                              verify_cert=False,
                              debug=opts.debug, verbose=opts.debug)

        rtn_code, rtn_code_type, rtn_txt, time = test_server(conn,
                                                      record['IPAddress'],
                                                      debug=opts.debug,
                                                      verbose=opts.verbose,
                                                      ping=opts.ping)

        if rtn_code != 0:
            print('%s(%s:%s) ERROR, code=%s:%s; %s %s' %  \
                  (server, record_id, company, rtn_code_type, rtn_code, rtn_txt, 
                   time))
        else:
            if opts.verbose:
                print('%s(%s:%s) Return code = %s %s' % (server, record_id, 
                                                      company,
                                                      rtn_code, rtn_code_type))


if __name__ == '__main__':
    sys.exit(main(os.path.basename(sys.argv[0])))
